{"version":3,"sources":["webpack://cptv-player-vue/./node_modules/cptv-decoder/pkg/index.js","webpack://cptv-player-vue/./node_modules/cptv-decoder/pkg/index_bg.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAExC;;AAEA;;AAEA,yBAAyB,kBAAkB;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,mDAAmD,+BAA+B;;AAElF;;AAEA;AACA;AACA,yEAAyE,yDAAkB;AAC3F,8CAA8C,yDAAkB;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,IAAI,YAAY,IAAI,UAAU;AACzD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,UAAU,cAAc;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,yDAAkB;AAC3F,8CAA8C,yDAAkB;AAChE;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,mEAA4B;;AAE5C,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,wKAAiI;AACrI;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT,YAAY,gEAAyB;AACrC;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA,IAAI,2GAAoE;AACxE;;AAEA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,wEAAiC;AACzC;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA,kBAAkB,2EAAoC;AACtD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4EAAqC;AACvD;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,8EAAuC;AACzD;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,4EAAqC;AACvD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yEAAkC;AACpD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yEAAkC;AACpD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,0EAAmC;AACrD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4EAAqC;AACvD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,sEAA+B;AACjD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uEAAgC;AAClD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,0EAAmC;AACrD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,gFAAyC;AAC3D;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,yEAAkC;AACpD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uEAAgC;AAClD;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP,cAAc,kDAAW;AACzB;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,sCAAsC,6DAAsB,EAAE,8DAAuB;AACrF;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL,QAAQ,2DAAoB;AAC5B;AACA;;AAEO;AACP;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,sCAAsC,6DAAsB,EAAE,8DAAuB;AACrF;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA","file":"CptvPlayerVue.common.711.js","sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";","import * as wasm from './index_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_22(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h58f26b25ebd66e81(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction handleError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            wasm.__wbindgen_exn_store(addHeapObject(e));\n        }\n    };\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction __wbg_adapter_51(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h8c76bc75b4ce3cb1(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n*/\nexport class CptvPlayerContext {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CptvPlayerContext.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cptvplayercontext_free(ptr);\n    }\n    /**\n    * @param {any} stream\n    * @returns {any}\n    */\n    static newWithStream(stream) {\n        var ret = wasm.cptvplayercontext_newWithStream(addHeapObject(stream));\n        return takeObject(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    streamComplete() {\n        var ret = wasm.cptvplayercontext_streamComplete(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {CptvPlayerContext} context\n    * @returns {any}\n    */\n    static countTotalFrames(context) {\n        _assertClass(context, CptvPlayerContext);\n        var ptr0 = context.ptr;\n        context.ptr = 0;\n        var ret = wasm.cptvplayercontext_countTotalFrames(ptr0);\n        return takeObject(ret);\n    }\n    /**\n    * @param {CptvPlayerContext} context\n    * @returns {any}\n    */\n    static fetchNextFrame(context) {\n        _assertClass(context, CptvPlayerContext);\n        var ptr0 = context.ptr;\n        context.ptr = 0;\n        var ret = wasm.cptvplayercontext_fetchNextFrame(ptr0);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    totalFrames() {\n        var ret = wasm.cptvplayercontext_totalFrames(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    bytesLoaded() {\n        var ret = wasm.cptvplayercontext_bytesLoaded(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint16Array}\n    */\n    getNextFrame() {\n        var ret = wasm.cptvplayercontext_getNextFrame(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    getFrameHeader() {\n        var ret = wasm.cptvplayercontext_getFrameHeader(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    getWidth() {\n        var ret = wasm.cptvplayercontext_getWidth(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    getHeight() {\n        var ret = wasm.cptvplayercontext_getHeight(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    getFrameRate() {\n        var ret = wasm.cptvplayercontext_getFrameRate(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    getFramesPerIframe() {\n        var ret = wasm.cptvplayercontext_getFramesPerIframe(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {CptvPlayerContext} context\n    * @returns {any}\n    */\n    static fetchHeader(context) {\n        _assertClass(context, CptvPlayerContext);\n        var ptr0 = context.ptr;\n        context.ptr = 0;\n        var ret = wasm.cptvplayercontext_fetchHeader(ptr0);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {any}\n    */\n    getHeader() {\n        var ret = wasm.cptvplayercontext_getHeader(this.ptr);\n        return takeObject(ret);\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_3ea8490cd276c848 = function(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_51(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        var ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport const __wbindgen_number_new = function(arg0) {\n    var ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithlength_90fbb2b2d057a3c0 = function(arg0) {\n    var ret = new Uint16Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_buffer_ebc6c8e75510eae3 = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_9eb3327abeac2c52 = function(arg0, arg1, arg2) {\n    var ret = new Uint16Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_new_68adb0d58759a4ed = function() {\n    var ret = new Object();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_set_2e79e744454afade = function(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbg_read_2516fe8e4e56274e = handleError(function(arg0) {\n    var ret = getObject(arg0).read();\n    return addHeapObject(ret);\n});\n\nexport const __wbg_then_ac66ca61394bfd21 = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_boolean_get = function(arg0) {\n    const v = getObject(arg0);\n    var ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport const __wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport const __wbg_instanceof_Uint8Array_d7349a138407a31e = function(arg0) {\n    var ret = getObject(arg0) instanceof Uint8Array;\n    return ret;\n};\n\nexport const __wbg_byteLength_7d55aca7ec6c42cb = function(arg0) {\n    var ret = getObject(arg0).byteLength;\n    return ret;\n};\n\nexport const __wbg_length_317f0dd77f7a6673 = function(arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\n\nexport const __wbg_new_135e963dedf67b22 = function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_set_4a5072a31008e0cb = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport const __wbg_cptvplayercontext_new = function(arg0) {\n    var ret = CptvPlayerContext.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_call_f5e0576f61ee7461 = handleError(function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n});\n\nexport const __wbg_get_0c6963cbab34fbb6 = handleError(function(arg0, arg1) {\n    var ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n});\n\nexport const __wbg_new_7031805939a80203 = function(arg0, arg1) {\n    var ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_clone_ref = function(arg0) {\n    var ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbg_then_367b3e718069cfb9 = function(arg0, arg1) {\n    var ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_cb_drop = function(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    var ret = false;\n    return ret;\n};\n\nexport const __wbg_resolve_778af3f90b8e2b59 = function(arg0) {\n    var ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_debug_3c0b82934d1dd91e = function(arg0) {\n    console.debug(getObject(arg0));\n};\n\nexport const __wbg_error_9ff84d33a850b1ef = function(arg0) {\n    console.error(getObject(arg0));\n};\n\nexport const __wbg_info_3b2058a219fa31b9 = function(arg0) {\n    console.info(getObject(arg0));\n};\n\nexport const __wbg_log_386a8115a84a780d = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport const __wbg_warn_5fc232d538408d4a = function(arg0) {\n    console.warn(getObject(arg0));\n};\n\nexport const __wbindgen_closure_wrapper206 = function(arg0, arg1, arg2) {\n    var ret = makeMutClosure(arg0, arg1, 51, __wbg_adapter_22);\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}