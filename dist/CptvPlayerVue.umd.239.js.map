{"version":3,"sources":["webpack://CptvPlayerVue/../cptv-rs/decoder.js","webpack://CptvPlayerVue/../cptv-rs/decoder.worker.js","webpack://CptvPlayerVue/ignored|/Users/jon/Dev/Cacophony/cptv-rs|fs/promises","webpack://CptvPlayerVue/ignored|/Users/jon/Dev/Cacophony/cptv-rs|worker_threads"],"names":["Unlocker","FakeReader","maxChunkSize","state","offsets","length","bytes","numParts","Math","percentages","i","read","value","resolve","done","cancel","initedWasm","CptvDecoderInterface","CptvPlayerContext","unlocker","fetch","size","Number","r","fs","file","filePath","isNode","fileBytes","console","frameData","frameHeader","sameFrameAsPrev","data","meta","header","totalFrameCount","duration","totalFrames","context","parentPort","player","result","type","frame","progress","hasError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAEMA,Q;AACJ,sBAAc;AAAA;;AACZ;AACD;;;;WACD,kBAAS;AACP,iBAAW,KAAX,EAAW,EAAX;AACD;;;;KAGH;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,QAAmC;AAAA,MAAlBC,YAAkB,uEAAH,CAAG;AACpD,MAAMC,KAAK,GAAG;AACZC,WAAO,EAAE;AADG,GAAd;AAGAD,OAAK,CAALA;AACAA,OAAK,CAALA;AACA,MAAME,MAAM,GAAGC,KAAK,CANgC,UAMpD,CANoD,CAOpD;;AACA,MAAIC,QAAQ,GAAZ;;AACA,MAAIL,YAAY,KAAhB,GAAwB;AACtBK,YAAQ,GAAGC,IAAI,CAAJA,KAAUH,MAAM,GAA3BE,YAAWC,CAAXD;AACD;;AACD,MAAME,WAAW,GAAGJ,MAAM,GAA1B;;AACA,OAAK,IAAIK,CAAC,GAAV,GAAgBA,CAAC,GAAjB,UAA8BA,CAA9B,IAAmC;AACjCP,SAAK,CAALA,aAAmBK,IAAI,CAAJA,KAAUC,WAAW,GAAxCN,CAAmBK,CAAnBL;AACD;;AACDA,OAAK,CAALA;AACA,SAAO;AACLQ,QADK,kBACE;AACL,aAAO,YAAY,mBAAa;AAC9BR,aAAK,CAALA;AACA,YAAMS,KAAK,GAAGT,KAAK,CAALA,YAAkBA,KAAK,CAALA,QAAcA,KAAK,CAALA,SAAhCA,CAAkBA,CAAlBA,EAAmDA,KAAK,CAALA,QAAcA,KAAK,CAApF,MAAiEA,CAAnDA,CAAd;AACAU,eAAO,CAAC;AACND,eAAK,EADC;AAENE,cAAI,EAAEX,KAAK,CAALA,WAAiBA,KAAK,CAALA,iBAAuB;AAFxC,SAAD,CAAPU;AAHF,OAAO,CAAP;AAFG;AAWLE,UAXK,oBAWI;AACP;AACA,aAAO,YAAY,mBAAa;AAC9BF,eAAO;AADT,OAAO,CAAP;AAGD;AAhBI,GAAP;AAjBF,E,CAqCA;AACA;AACA;;;AACA,IAAIG,UAAU,GAAd;AAEA,IAAaC,oBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gGACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGiC,yGAHjC;;AAAA;AAGMC,iCAHN,kCAGMA;AAHN;AAAA;;AAAA;AAAA;AAAA,uBAKiC,mGALjC;;AAAA;AAKMA,iCALN,kCAKMA;;AALN;AAOIF,0BAAU,GAAVA;AAPJ;AAAA;;AAAA;AAAA,sBASWA,UAAU,IAAI,KATzB;AAAA;AAAA;AAAA;;AAUI;AAVJ,8BAWI,KAXJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWyB,YAXzB,MAWyB,EAXzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GAgBE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQG,wBADR,GACmB,IADnB,QACmB,EAAXA;AADR;AAAA,uBAEQ,uBAFR,QAEQ,CAFR;;AAAA;AAGE;AACA;AAJF;AAAA,uBAKQ,cALR,KAKQ,CALR;;AAAA;AAAA,oCAOI;AACA;;AACA;AATJ;AAAA,uBAU0BC,KAAK,CAV/B,GAU+B,CAV/B;;AAAA;AAUI,qBAVJ,QAUI,GAVJ,cAUI;;AAVJ,sBAWQ,yBAXR;AAAA;AAAA;AAAA;;AAYM,8BAAc,mBAAd,SAAc,EAAd;;AACA,oBAAI,CAAJ,MAAW;AACTC,sBAAI,GAAGC,MAAM,CAAC,0BAAPA,gBAAO,CAAD,CAANA,IAAPD;AACD;;AACD;AAhBN;AAAA,uBAiBiCH,iBAAiB,CAAjBA,cAAgC,KAjBjE,MAiBiCA,CAjBjC;;AAAA;AAiBM,qBAjBN,aAiBM,GAjBN,cAiBM;AACAC,wBAAQ,CAARA;AACA;AACA;AApBN;;AAAA;AAuBMA,wBAAQ,CAARA;AACA;AAxBN;AAAA;AAAA,uBA0BwB,cA1BxB,IA0BwB,EA1BxB;;AAAA;AA0BcI,kBA1Bd,iBA0BcA;AA1Bd,kDA2BgBA,EAAC,CAADA,YAAcA,EAAC,CAADA,SAAf,GAAeA,EAAdA,IAAmCA,EAAC,CAArC,OAACA,IA3BhB;;AAAA;AAAA;AAAA;AAAA;AAAA,uBA6BqBA,CAAC,CA7BtB,IA6BqBA,EA7BrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiCI;AAjCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAsDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEqBC,2BAFrB,QAEqBA,CAFrB;;AAAA;AAEQC,oBAFR,iBAEQA;AAFR,kDAGS,uCAHT,IAGS,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtDF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGA4DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,wBAAnC,gEAAmCA;AAAeC,sBAAlD,mEAAkDA,CAAlD,CACE;;AACMR,wBAFR,GAEmB,IAFnB,QAEmB,EAAXA;AAFR;AAAA,uBAGQ,uBAHR,QAGQ,CAHR;;AAAA;AAIE;AACA;AALF;AAAA,uBAMQ,cANR,MAMQ,CANR;;AAAA;AAOE;AACA,8BAAc,0BAAd,MAAc,CAAd;AACA,oCAAoBS,SAAS,CAA7B;AATF;AAAA;AAAA,uBAW+BV,iBAAiB,CAAjBA,cAAgC,KAX/D,MAW+BA,CAX/B;;AAAA;AAWI,qBAXJ,aAWI,GAXJ,cAWI;AACAC,wBAAQ,CAARA;AACA;AACA;AAdJ;;AAAA;AAAA;AAAA;AAiBIA,wBAAQ,CAARA;AACA;AAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5DF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGAmFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,KADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,qBAIM,KAJN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOQA,wBAPR,GAOmB,IAPnB,QAOmB,EAAXA;AAPR;AAAA,uBAQQ,uBARR,QAQQ,CARR;;AAAA;AASE;;AATF,sBAUM,sBAAsB,mBAV5B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAYiCD,iBAAiB,CAAjBA,eAAiC,KAZlE,aAYiCA,CAZjC;;AAAA;AAYM,qBAZN,aAYM,GAZN,cAYM;AAZN;AAAA;;AAAA;AAAA;AAAA;AAcM;AAdN;;AAAA;AAAA;AAAA;;AAAA;AAkBIW,uBAAO,CAAPA;;AAlBJ;AAoBEV,wBAAQ,CAARA;AACA;AACMW,yBAtBR,GAsBoB,mBAtBpB,YAsBoB,EAAZA;AACAC,2BAvBR,GAuBsB,mBAvBtB,cAuBsB,EAAdA,CAvBR,CAyBE;;AAzBF,sBA0BMA,WAAW,CAAXA,oBA1BN;AAAA;AAAA;AAAA;;AA2BUC,+BA3BV,GA2B4BD,WAAW,IAAI,KAAfA,mBAAuCA,WAAW,CAAXA,aAAyB,qBA3B5F,QA2BUC;;AA3BV,sBA4BQA,eAAe,IAAI,0BA5B3B;AAAA;AAAA;AAAA;;AA6BM;AA7BN;AAAA,uBA8BmB,KA9BnB,cA8BmB,EA9BnB;;AAAA;AAAA;;AAAA;AAgCI;;AAhCJ;AAAA,sBAkCMF,SAAS,CAATA,WAlCN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kDAqCS;AAAEG,sBAAI,EAAE,gBAAR,SAAQ,CAAR;AAAoCC,sBAAI,EAAEH;AAA1C,iBArCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGA2HE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,KADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIQZ,wBAJR,GAImB,IAJnB,QAImB,EAAXA;AAJR;AAAA,uBAKQ,uBALR,QAKQ,CALR;;AAAA;AAME;;AANF,sBAOM,sBAAsB,mBAP5B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBASiCD,iBAAiB,CAAjBA,iBAAmC,KATpE,aASiCA,CATjC;;AAAA;AASM,qBATN,aASM,GATN,cASM;AATN;AAAA;;AAAA;AAAA;AAAA;AAWM;;AAXN;AAaI;AACA;AACA;;AAfJ;AAiBEC,wBAAQ,CAARA;AACA;AAlBF,kDAmBS,KAnBT,cAmBS,EAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3HF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAiJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,KADvB,SACuB,EADvB;;AAAA;AACQgB,sBADR,iBACQA;;AADR,sBAEM,kBAFN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAMgC,KANhC,gBAMgC,EANhC;;AAAA;AAMQC,+BANR,iBAMQA;AACAC,wBAPR,GAOoB,IAAIF,MAAM,CAAX,GAAC,GAPpB,eAOQE;AAPR;AAUIA,0BAAQ,EAVZ;AAWIC,6BAAW,EAAEF;AAXjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjJF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAgKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQ,sCAAsC,CAAC,CAD/C,iBACQ,CADR;;AAAA;AAAA;AAAA,uBAEe,KAFf,WAEe,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhKF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAqKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQ,sBADR,QACQ,CADR;;AAAA;AAAA;AAAA,uBAEe,KAFf,WAEe,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArKF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGA0KE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQ,iCADR,IACQ,CADR;;AAAA;AAAA;AAAA,uBAEe,KAFf,WAEe,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1KF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGA+KE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mDACS,YAAY,mBAAa;AAC9B,sBAAI,KAAI,CAAR,QAAiB;AACfjB,4BAAQ,CAARA;AADF,yBAEO;AACLN,2BAAO;AACR;AANL,iBACS,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/KF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGAyLE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,KADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIQM,wBAJR,GAImB,IAJnB,QAImB,EAAXA;AAJR;AAAA,uBAKQ,uBALR,QAKQ,CALR;;AAAA;AAME;;AANF,sBAOM,sBAAsB,mBAP5B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAQ+BD,iBAAiB,CAAjBA,YAA8B,KAR7D,aAQ+BA,CAR/B;;AAAA;AAQI,qBARJ,aAQI,GARJ,eAQI;;AARJ;AAUQiB,sBAVR,GAUiB,mBAVjB,SAUiB,EAATA;;AACN,oBAAIA,MAAM,KAAV,0BAAyC;AACvC;AACD;;AACDhB,wBAAQ,CAARA;AACA;AAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzLF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA4ME,0BAAiB;AACf,UAAI,KAAJ,aAAsB;AACpB;AACD;;AACD,UAAI,CAAC,KAAD,UAAgB,KAAhB,UAA+B,mBAA/B,OAAyD,mBAA7D,cAA6D,EAA7D,EAAkG;AAChG,eAAO,mBAAP,WAAO,EAAP;AACD;;AACD;AACD;AApNH;AAAA;AAAA,WAsNE,2BAAkB;AAChB,UAAI,eAAgB,CAAC,KAAD,aAAhB,IAAuC,CAAC,mBAA5C,KAAqE;AACnE;AAFc,QAIhB;;;AACA,aAAO,mCAAmC,KAA1C;AACD;AA5NH;AAAA;AAAA;AAAA,sGA8NE;AAAA;AAAA;AAAA;AAAA;AAAA,mDACS,qBADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9NF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,I;;;;;;;ACnEA;AACA;AACA,IAAMoB,OAAO,GAAGC,kCAAU,KAAK,qCAA/B,KAA0B,CAA1B;;AACA,aAAa;AACX,MAAMC,MAAM,GAAG,IAAf,oBAAe,EAAf;AACAF,SAAO,CAAPA;AAAAA,0FAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAQN,kBAAR,YAAQA;AAAR,4BAC1BA,IAAI,CADsB;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAGTQ,MAAM,CAANA,uBAA8BR,IAAI,CAHzB,GAGTQ,CAHS;;AAAA;AAGxBC,oBAHwB,gBAGxBA;AACNH,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAES;AAAxB,eAApBH;AAJ8B;;AAAA;AAAA;AAAA,qBAQTE,MAAM,CAANA,uBAA8BR,IAAI,CAAlCQ,KAAwCR,IAAI,CARnC,IAQTQ,CARS;;AAAA;AAQxBC,qBARwB,gBAQxBA;AACNH,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAES;AAAxB,eAApBH;AAT8B;;AAAA;AAAA;AAAA,qBAaTE,MAAM,CAANA,iBAAwBR,IAAI,CAbnB,IAaTQ,CAbS;;AAAA;AAaxBC,sBAbwB,gBAaxBA;AACNH,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAES;AAAxB,eAApBH;AAd8B;;AAAA;AAAA;AAAA,qBAkBTE,MAAM,CAANA,kBAAyBR,IAAI,CAlBpB,WAkBTQ,CAlBS;;AAAA;AAkBxBC,sBAlBwB,gBAkBxBA;AACNH,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAES;AAAxB,eAApBH;AAnB8B;;AAAA;AAAA;AAAA,qBAuBTE,MAAM,CAANA,iBAAwBR,IAAI,CAvBnB,WAuBTQ,CAvBS;;AAAA;AAuBxBN,oBAvBwB,gBAuBxBA;AACNI,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEE;AAAxB,eAApBI;AAxB8B;;AAAA;AAAA;AAAA,qBA4BTE,MAAM,CAANA,gBAAuBR,IAAI,CA5BlB,IA4BTQ,CA5BS;;AAAA;AA4BxBN,qBA5BwB,gBA4BxBA;AACNI,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEE;AAAxB,eAApBI;AA7B8B;;AAAA;AAAA;AAAA,qBAiCTE,MAAM,CAANA,kBAAyBR,IAAI,CAjCpB,GAiCTQ,CAjCS;;AAAA;AAiCxBN,sBAjCwB,gBAiCxBA;AACNI,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEE;AAAxB,eAApBI;AAlC8B;;AAAA;AAAA;AAAA,qBAsCVE,MAAM,CAtCI,cAsCVA,EAtCU;;AAAA;AAsCxBG,mBAtCwB,gBAsCxBA;AACNL,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEW;AAAxB,eAApBL;AAvC8B;;AAAA;AA2CxBD,yBA3CwB,GA2CVG,MAAM,CA3CI,cA2CVA,EAAdH;AACNC,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEK;AAAxB,eAApBC;AA5C8B;;AAAA;AAgDxBM,sBAhDwB,GAgDbJ,MAAM,CAhDO,eAgDbA,EAAXI;AACNN,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEY;AAAxB,eAApBN;AAjD8B;;AAAA;AAAA;AAAA,qBAqDTE,MAAM,CArDG,SAqDTA,EArDS;;AAAA;AAqDxBN,sBArDwB,gBAqDxBA;AACNI,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEE;AAAxB,eAApBI;AAtD8B;;AAAA;AAAA;AAAA,qBA0DPE,MAAM,CA1DC,cA0DPA,EA1DO;;AAAA;AA0DxBK,sBA1DwB,gBA0DxBA;AACNP,qBAAO,CAAPA,YAAoB;AAACI,oBAAI,EAAEV,IAAI,CAAX;AAAkBA,oBAAI,EAAEa;AAAxB,eAApBP;AA3D8B;;AAAA;AA+D9BA,qBAAO,CAAPA;AA/D8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApCA;;AAAAA;AAAAA;AAAAA;AAAAA;AAmED;;AACD,qDAAe,YAAM;AACnB;AADF,G;;;;;;;ACzEA,e;;;;;;;ACAA,e","file":"CptvPlayerVue.umd.239.js","sourcesContent":["let CptvPlayerContext;\n\n/**\n * NOTE: For browser usage, these imports need to be stubbed\n *  out in your webpack config using:\n *\n * resolve: {\n *  fallback: {\n *    fs\n *  }\n * }\n */\n\nimport fs from \"fs/promises\";\n\nclass Unlocker {\n  constructor() {\n    this.fn = null;\n  }\n  unlock() {\n    this.fn && this.fn();\n  }\n}\n\n// For use in nodejs to wrap an already loaded array buffer into a Reader interface\nconst FakeReader = function (bytes, maxChunkSize = 0) {\n  const state = {\n    offsets: []\n  };\n  state.bytes = bytes;\n  state.offset = 0;\n  const length = bytes.byteLength;\n  // How many reader chunks to split the file into\n  let numParts = 5;\n  if (maxChunkSize !== 0) {\n    numParts = Math.ceil(length / maxChunkSize);\n  }\n  const percentages = length / numParts;\n  for (let i = 0; i < numParts; i++) {\n    state.offsets.push(Math.ceil(percentages * i));\n  }\n  state.offsets.push(length);\n  return {\n    read() {\n      return new Promise((resolve) => {\n        state.offset += 1;\n        const value = state.bytes.slice(state.offsets[state.offset - 1], state.offsets[state.offset]);\n        resolve({\n          value,\n          done: state.offset === state.offsets.length - 1\n        });\n      });\n    },\n    cancel() {\n      // Does nothing.\n      return new Promise((resolve) => {\n        resolve()\n      });\n    }\n  }\n};\n\n// TODO(jon): This differs depending on whether the sensor is lepton 3 or 3.5\n// TODO(jon): This is probably out of scope for this library, should be handled\n//  at the player level.\nlet initedWasm = false;\n\nexport class CptvDecoderInterface {\n  async initWasm(isNode) {\n    if (!initedWasm) {\n      if (isNode) {\n        CptvPlayerContext = (await import(\"./pkg-node/index.js\")).CptvPlayerContext;\n      } else {\n        CptvPlayerContext = (await import (\"./pkg/index.js\")).CptvPlayerContext;\n      }\n      initedWasm = true;\n    }\n    else if (initedWasm && this.inited) {\n      this.playerContext.free();\n      this.reader && await this.reader.cancel();\n    }\n  }\n\n  async initWithCptvUrlAndSize(url, size) {\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    this.prevFrameHeader = null;\n    await this.initWasm(false);\n    try {\n      // Use this expired JWT token to test that failure case (usually when a page has been open too long)\n      // const oldJWT = \"https://api.cacophony.org.nz/api/v1/signedUrl?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdHlwZSI6ImZpbGVEb3dubG9hZCIsImtleSI6InJhdy8yMDIxLzA0LzE1LzQ3MGU2YjY1LWZkOTgtNDk4Ny1iNWQ3LWQyN2MwOWIxODFhYSIsImZpbGVuYW1lIjoiMjAyMTA0MTUtMTE0MjE2LmNwdHYiLCJtaW1lVHlwZSI6ImFwcGxpY2F0aW9uL3gtY3B0diIsImlhdCI6MTYxODQ2MjUwNiwiZXhwIjoxNjE4NDYzMTA2fQ.p3RAOX7Ns52JqHWTMM5Se-Fn-UCyRtX2tveaGrRmiwo\";\n      this.consumed = false;\n      this.response = await fetch(url);\n      if (this.response.status === 200) {\n        this.reader = this.response.body.getReader();\n        if (!size) {\n          size = Number(this.response.headers.get(\"Content-Length\")) || 0;\n        }\n        this.expectedSize = size;\n        this.playerContext = await CptvPlayerContext.newWithStream(this.reader);\n        unlocker.unlock();\n        this.inited = true;\n        this.locked = false;\n        return true;\n      } else {\n        unlocker.unlock();\n        this.locked = false;\n        try {\n          const r = await this.response.json();\n          return (r.messages && r.messages.pop()) || r.message || \"Unknown error\";\n        } catch (e) {\n          return await r.text();\n        }\n      }\n    } catch (e) {\n      this.locked = false;\n      return `Failed to load CPTV url ${url}, ${e}`;\n    }\n  }\n\n  async initWithCptvFile(filePath) {\n    // Don't call this from a browser!\n    const file = await fs.readFile(filePath);\n    return this.initWithFileBytes(file, filePath, true);\n  }\n\n  async initWithFileBytes(fileBytes, filePath = \"\", isNode = false) {\n    // Don't call this from a browser!\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.prevFrameHeader = null;\n    this.locked = true;\n    await this.initWasm(isNode);\n    this.consumed = false;\n    this.reader = new FakeReader(fileBytes, 100000);\n    this.expectedSize = fileBytes.length;\n    try {\n      this.playerContext = await CptvPlayerContext.newWithStream(this.reader);\n      unlocker.unlock();\n      this.inited = true;\n      this.locked = false;\n      return true;\n    } catch (e) {\n      unlocker.unlock();\n      this.locked = false;\n      return `Failed to load CPTV file ${filePath}, ${e}`;\n    }\n  }\n\n  async fetchNextFrame() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    if (this.consumed) {\n      return \"Stream has already been consumed and discarded\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      try {\n        this.playerContext = await CptvPlayerContext.fetchNextFrame(this.playerContext);\n      } catch (e) {\n        this.streamError = e;\n        return null;\n      }\n    } else {\n      console.warn(\"Fetch next failed\");\n    }\n    unlocker.unlock();\n    this.locked = false;\n    const frameData = this.playerContext.getNextFrame();\n    const frameHeader = this.playerContext.getFrameHeader();\n\n    // NOTE(jon): Work around a bug where the mlx sensor doesn't report timeOn times, just hardcodes 60000\n    if (frameHeader.imageData.width !== 32) {\n      const sameFrameAsPrev = frameHeader && this.prevFrameHeader && frameHeader.timeOnMs === this.prevFrameHeader.timeOnMs;\n      if (sameFrameAsPrev && this.getTotalFrames() === null) {\n        this.prevFrameHeader = frameHeader;\n        return await this.fetchNextFrame();\n      }\n      this.prevFrameHeader = frameHeader;\n    }\n    if (frameData.length === 0) {\n      return null;\n    }\n    return { data: new Uint16Array(frameData), meta: frameHeader };\n  }\n\n  async countTotalFrames() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      try {\n        this.playerContext = await CptvPlayerContext.countTotalFrames(this.playerContext);\n      } catch (e) {\n        this.streamError = e;\n      }\n      // We can't call any other methods that read frame data on this stream,\n      // since we've exhausted it and thrown away the data after scanning for the info we want.\n      this.consumed = true;\n    }\n    unlocker.unlock();\n    this.locked = false;\n    return this.getTotalFrames();\n  }\n\n  async getMetadata() {\n    const header = await this.getHeader();\n    if (typeof header === \"string\") {\n      // Parse error\n      return header;\n    }\n    const totalFrameCount = await this.countTotalFrames();\n    const duration = (1 / header.fps) * totalFrameCount;\n    return {\n      ...header,\n      duration,\n      totalFrames: totalFrameCount,\n    }\n  }\n\n  async getBytesMetadata(fileBytes) {\n    await this.initWithFileBytes(fileBytes, \"\", !!fs);\n    return await this.getMetadata();\n  }\n\n  async getFileMetadata(filePath) {\n    await this.initWithCptvFile(filePath);\n    return await this.getMetadata();\n  }\n\n  async getStreamMetadata(url, size) {\n    await this.initWithCptvUrlAndSize(url, size);\n    return await this.getMetadata();\n  }\n\n  async lockIsUncontended(unlocker) {\n    return new Promise((resolve) => {\n      if (this.locked) {\n        unlocker.fn = resolve;\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  async getHeader() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      this.playerContext = await CptvPlayerContext.fetchHeader(this.playerContext);\n    }\n    const header = this.playerContext.getHeader();\n    if (header === \"Unable to parse header\") {\n      this.streamError = header;\n    }\n    unlocker.unlock();\n    this.locked = false;\n    return header;\n  }\n\n  getTotalFrames() {\n    if (this.streamError) {\n      return 1;\n    }\n    if (!this.locked && this.inited && this.playerContext.ptr && this.playerContext.streamComplete()) {\n      return this.playerContext.totalFrames();\n    }\n    return null;\n  }\n\n  getLoadProgress() {\n    if (this.locked || (!this.playerContext || !this.playerContext.ptr)) {\n      return null;\n    }\n    // This doesn't actually tell us how much has downloaded, just how much has been lazily read.\n    return this.playerContext.bytesLoaded() / this.expectedSize;\n  }\n\n  async hasStreamError() {\n    return this.streamError !== undefined;\n  }\n}\n","import {CptvDecoderInterface} from \"./decoder.js\";\nimport {parentPort} from \"worker_threads\";\nconst context = parentPort || (typeof self !== \"undefined\" ? self : false);\nif (context) {\n  const player = new CptvDecoderInterface();\n  context.addEventListener(\"message\", async ({data}) => {\n    switch (data.type) {\n      case \"initWithUrl\": {\n        const result = await player.initWithCptvUrlAndSize(data.url);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithUrlAndSize\": {\n        const result = await player.initWithCptvUrlAndSize(data.url, data.size);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithPath\": {\n        const result = await player.initWithCptvFile(data.path);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithLocalCptvFile\": {\n        const result = await player.initWithFileBytes(data.arrayBuffer);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"getBytesMetadata\": {\n        const header = await player.getBytesMetadata(data.arrayBuffer);\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      case \"getFileMetadata\": {\n        const header = await player.getFileMetadata(data.path);\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      case \"getStreamMetadata\": {\n        const header = await player.getStreamMetadata(data.url);\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      case \"getNextFrame\": {\n        const frame = await player.fetchNextFrame();\n        context.postMessage({type: data.type, data: frame});\n      }\n        break;\n      case \"getTotalFrames\": {\n        const totalFrames = player.getTotalFrames();\n        context.postMessage({type: data.type, data: totalFrames});\n      }\n        break;\n      case \"getLoadProgress\": {\n        const progress = player.getLoadProgress();\n        context.postMessage({type: data.type, data: progress});\n      }\n        break;\n      case \"getHeader\": {\n        const header = await player.getHeader();\n        context.postMessage({type: data.type, data: header});\n      }\n        break\n      case \"hasStreamError\": {\n        const hasError = await player.hasStreamError();\n        context.postMessage({type: data.type, data: hasError });\n      }\n        break;\n      default:\n        context.postMessage(data);\n        return;\n    }\n  });\n}\nexport default () => {\n  return false;\n};\n","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}