{"version":3,"sources":["webpack://CptvPlayerVue/../cptv-rs/decoder.js","webpack://CptvPlayerVue/../cptv-rs/decoder.worker.js"],"names":["Unlocker","this","FakeReader","state","offsets","length","bytes","numParts","maxChunkSize","Math","percentages","i","read","Promise","value","resolve","done","cancel","initedWasm","CptvDecoderInterface","unlocker","lockIsUncontended","CptvPlayerContext","reader","fetch","response","status","body","size","Number","headers","get","r","fs","file","require","createRequire","import","path","wasm","initWithFileBytes","filePath","window","fileBytes","playerContext","frameData","frameHeader","data","Uint16Array","meta","header","totalFrameCount","duration","initWithCptvFile","initWithCptvUrlAndSize","url","locked","bytesLoaded","context","parentPort","self","player","result","type","frame","totalFrames","progress"],"mappings":"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","file":"CptvPlayerVue.umd.min.251.js","sourcesContent":["let CptvPlayerContext;\n\n/**\n * NOTE: For browser usage, these imports need to be stubbed\n *  out in your webpack config using:\n *\n * resolve: {\n *  fallback: {\n *    fs,\n *    module,\n *  }\n * }\n */\n\nimport fs from \"fs/promises\";\nimport { createRequire } from \"module\";\n\nclass Unlocker {\n  constructor() {\n    this.fn = null;\n  }\n  unlock() {\n    this.fn && this.fn();\n  }\n}\n\n// For use in nodejs to wrap an already loaded array buffer into a Reader interface\nconst FakeReader = function (bytes, maxChunkSize) {\n  const state = {\n    offsets: []\n  };\n  state.bytes = bytes;\n  state.offset = 0;\n  const length = bytes.byteLength;\n  // How many reader chunks to split the file into\n  let numParts = 5;\n  if (maxChunkSize !== 0) {\n    numParts = Math.ceil(length / maxChunkSize);\n  }\n  const percentages = length / numParts;\n  for (let i = 0; i < numParts; i++) {\n    state.offsets.push(Math.ceil(percentages * i));\n  }\n  state.offsets.push(length);\n  return {\n    read() {\n      return new Promise((resolve) => {\n        state.offset += 1;\n        const value = state.bytes.slice(state.offsets[state.offset - 1], state.offsets[state.offset]);\n        resolve({\n          value,\n          done: state.offset === state.offsets.length - 1\n        });\n      });\n    },\n    cancel() {\n      // Does nothing.\n      return new Promise((resolve) => {\n        resolve()\n      });\n    }\n  }\n};\n\n// TODO(jon): This differs depending on whether the sensor is lepton 3 or 3.5\n// TODO(jon): This is probably out of scope for this library, should be handled\n//  at the player level.\nlet initedWasm = false;\n\nexport class CptvDecoderInterface {\n  async initWithCptvUrlAndSize(url, size) {\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (!initedWasm) {\n      CptvPlayerContext = (await import (\"./pkg/index.js\")).CptvPlayerContext;\n      initedWasm = true;\n    } else if (initedWasm && this.inited) {\n      this.playerContext.free();\n      this.reader && await this.reader.cancel();\n    }\n    try {\n      // Use this expired JWT token to test that failure case (usually when a page has been open too long)\n      // const oldJWT = \"https://api.cacophony.org.nz/api/v1/signedUrl?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdHlwZSI6ImZpbGVEb3dubG9hZCIsImtleSI6InJhdy8yMDIxLzA0LzE1LzQ3MGU2YjY1LWZkOTgtNDk4Ny1iNWQ3LWQyN2MwOWIxODFhYSIsImZpbGVuYW1lIjoiMjAyMTA0MTUtMTE0MjE2LmNwdHYiLCJtaW1lVHlwZSI6ImFwcGxpY2F0aW9uL3gtY3B0diIsImlhdCI6MTYxODQ2MjUwNiwiZXhwIjoxNjE4NDYzMTA2fQ.p3RAOX7Ns52JqHWTMM5Se-Fn-UCyRtX2tveaGrRmiwo\";\n      this.consumed = false;\n      this.response = await fetch(url);\n      if (this.response.status === 200) {\n        this.reader = this.response.body.getReader();\n        if (!size) {\n          size = Number(this.response.headers.get(\"Content-Length\")) || 0;\n        }\n        this.expectedSize = size;\n        this.playerContext = await CptvPlayerContext.newWithStream(this.reader);\n        unlocker.unlock();\n        this.inited = true;\n        this.locked = false;\n        return true;\n      } else {\n        this.locked = false;\n        try {\n          const r = await this.response.json();\n          return (r.messages && r.messages.pop()) || r.message || \"Unknown error\";\n        } catch (e) {\n          return await r.text();\n        }\n      }\n    } catch (e) {\n      this.locked = false;\n      return `Failed to load CPTV url ${url}, ${e}`;\n    }\n  }\n\n  async initWithCptvFile(filePath) {\n    // Don't call this from a browser!\n    const file = await fs.readFile(filePath);\n    const require = createRequire(import.meta.url);\n    const path = require.resolve(\"./pkg-node/index_bg.wasm\");\n    const wasm = await fs.readFile(path);\n    return this.initWithFileBytes(file, filePath, wasm);\n  }\n\n  async initWithFileBytes(fileBytes, filePath = \"\", wasm) {\n    // Don't call this from a browser!\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (!initedWasm) {\n      if (typeof window === \"undefined\") {\n        const require = createRequire(import.meta.url);\n        CptvPlayerContext = require(\"./pkg-node\").CptvPlayerContext;\n      } else {\n        CptvPlayerContext = (await import (\"./pkg/index.js\")).CptvPlayerContext;\n      }\n      initedWasm = true;\n    } else if (initedWasm && this.inited) {\n      this.playerContext.free();\n      this.reader && await this.reader.cancel();\n    }\n    this.consumed = false;\n    this.reader = new FakeReader(fileBytes, 100000);\n    this.expectedSize = fileBytes.length;\n    try {\n      this.playerContext = await CptvPlayerContext.newWithStream(this.reader);\n      unlocker.unlock();\n      this.inited = true;\n      this.locked = false;\n      return true;\n    } catch (e) {\n      this.locked = false;\n      return `Failed to load CPTV file ${filePath}, ${e}`;\n    }\n  }\n\n  async fetchNextFrame() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    if (this.consumed) {\n      return \"Stream has already been consumed and discarded\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      this.playerContext = await CptvPlayerContext.fetchNextFrame(this.playerContext);\n    }\n    unlocker.unlock();\n    this.locked = false;\n    const frameData = this.playerContext.getNextFrame();\n    if (frameData.length === 0) {\n      return null;\n    }\n    const frameHeader = this.playerContext.getFrameHeader();\n    return { data: new Uint16Array(frameData), meta: frameHeader };\n  }\n\n  async countTotalFrames() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      this.playerContext = await CptvPlayerContext.countTotalFrames(this.playerContext);\n      // We can't call any other methods that read frame data on this stream,\n      // since we've exhausted it and thrown away the data after scanning for the info we want.\n      this.consumed = true;\n    }\n    unlocker.unlock();\n    this.locked = false;\n    return this.getTotalFrames();\n  }\n\n  async getMetadata() {\n    const header = await this.getHeader();\n    const totalFrameCount = await this.countTotalFrames();\n    const duration = (1 / header.fps) * totalFrameCount;\n    return {\n      ...header,\n      duration\n    }\n  }\n\n  async getFileMetadata(filePath) {\n    await this.initWithCptvFile(filePath, true);\n    return await this.getMetadata();\n  }\n\n  async getStreamMetadata(url, size) {\n    await this.initWithCptvUrlAndSize(url, size);\n    return await this.getMetadata();\n  }\n\n  async lockIsUncontended(unlocker) {\n    return new Promise((resolve) => {\n      if (this.locked) {\n        unlocker.fn = resolve;\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  async getHeader() {\n    if (!this.reader) {\n      return \"You need to initialise the player with the url of a CPTV file\";\n    }\n    const unlocker = new Unlocker();\n    await this.lockIsUncontended(unlocker);\n    this.locked = true;\n    if (this.playerContext && this.playerContext.ptr) {\n      this.playerContext = await CptvPlayerContext.fetchHeader(this.playerContext);\n    }\n    const header = this.playerContext.getHeader();\n    unlocker.unlock();\n    this.locked = false;\n    return header;\n  }\n\n  getTotalFrames() {\n    if (!this.locked && this.inited && this.playerContext.ptr && this.playerContext.streamComplete()) {\n      return this.playerContext.totalFrames();\n    }\n    return null;\n  }\n\n  getLoadProgress() {\n    if (this.locked || (!this.playerContext || !this.playerContext.ptr)) {\n      return null;\n    }\n    // This doesn't actually tell us how much has downloaded, just how much has been lazily read.\n    return this.playerContext.bytesLoaded() / this.expectedSize;\n  }\n}\n","import {CptvDecoderInterface} from \"./decoder.js\";\nimport {parentPort} from \"worker_threads\";\nconst context = parentPort || (typeof self !== \"undefined\" ? self : false);\nif (context) {\n  const player = new CptvDecoderInterface();\n  context.addEventListener(\"message\", async ({data}) => {\n    switch (data.type) {\n      case \"initWithUrl\": {\n        const result = await player.initWithCptvUrlAndSize(data.url);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithUrlAndSize\": {\n        const result = await player.initWithCptvUrlAndSize(data.url, data.size);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithPath\": {\n        const result = await player.initWithCptvFile(data.path);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"initWithLocalCptvFile\": {\n        const result = await player.initWithFileBytes(data.arrayBuffer);\n        context.postMessage({type: data.type, data: result});\n      }\n        break;\n      case \"getFileMetadata\": {\n        const header = await player.getFileMetadata(data.path);\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      case \"getStreamMetadata\": {\n        const header = await player.getStreamMetadata(data.url);\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      case \"getNextFrame\": {\n        const frame = await player.fetchNextFrame();\n        context.postMessage({type: data.type, data: frame});\n      }\n        break;\n      case \"getTotalFrames\": {\n        const totalFrames = player.getTotalFrames();\n        context.postMessage({type: data.type, data: totalFrames});\n      }\n        break;\n      case \"getLoadProgress\": {\n        const progress = player.getLoadProgress();\n        context.postMessage({type: data.type, data: progress});\n      }\n        break;\n      case \"getHeader\": {\n        const header = await player.getHeader();\n        context.postMessage({type: data.type, data: header});\n      }\n        break;\n      default:\n        context.postMessage(data);\n        return;\n    }\n  });\n}\nexport default () => {\n  return false;\n};\n"],"sourceRoot":""}